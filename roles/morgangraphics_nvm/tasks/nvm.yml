---

- name: Combine settings with default-values for nvm
  set_fact:
    nvm_settings: "{{ nvm_default | combine( nvm | default( {} ) ) }}"

- name: LTS Check
  set_fact:
    nvm_settings: "{{ nvm_settings | combine({'nodejs_version': '--lts'}) }}"
  when: nvm_settings.nodejs_version == 'lts'

# https://github.com/morgangraphics/ansible-role-nvm/issues/18
- name: determine shell in which we are running
  block:

    - name: set default found path
      set_fact:
        found_path: ''

    - name: test for shells
      command: "which {{ item }}"
      with_items:
        - bash
        - dash
        - zsh
        - csh
        - tcsh
      register: shell_path
      when: item in nvm_settings.nvm_profile

    - name: set found path
      set_fact:
        found_path: "{{ shell_path.results | selectattr('stdout', 'defined') | map(attribute = 'stdout') | list | first }}"
      when: shell_path.results | selectattr('stdout', 'defined') | map(attribute = 'stdout') | list | length > 0

    - name: set bash command
      set_fact:
        user_shell: { 'command': '{{ found_path }} -ic', 'alias': 'bash' }
      when: '"bash" in nvm_settings.nvm_profile'

    - name: set zsh command
      set_fact:
        user_shell: { 'command': '{{ found_path }} -ic', 'alias': 'zsh' }
      when: '"zsh" in nvm_settings.nvm_profile'

    - name: set csh command
      set_fact:
        user_shell: { 'command': '{{ found_path }} -ic', 'alias': 'csh' }
      when: "'csh' in nvm_settings.nvm_profile and 'tcsh' not in nvm_settings.nvm_profile"

    - name: set tcsh command
      set_fact:
        user_shell: { 'command': '{{ found_path }} -ic', 'alias': 'tcsh' }
      when: "'tcsh' in nvm_settings.nvm_profile"

    - name: "!WARNING! set unrecommended default for any other nvm_profile value !WARNING!"
      set_fact:
        user_shell: { 'command': '/etc/bash -ic', 'alias': 'bash' }
      when: (shell_path is undefined) or (found_path | length == 0)

    - name: does profile file exist
      stat:
        path: "{{ nvm_settings.nvm_profile }}"
      register: profile_file

    - name: Create profile file if it does not exist
      file:
        mode: "u=rw,g=r,o=r"
        path: "{{ nvm_settings.nvm_profile }}"
        state: touch
      when: not profile_file.stat.exists

  when: nvm_settings.nvm_profile | length != 0
  become: "{{ nvm_settings.user is defined }}"
  become_user: "{{ nvm_settings.user | d(omit) }}"

# wget (deault) or curl
- name: Installing via curl or wget
  block:
  - name: Check if wget or curl is installed
    command: "which {{ nvm_settings.nvm_install }}"
    register: cmd
    changed_when: "cmd.rc != 0"

  - name: Determine if install type wget
    set_fact:
      run_command: 'wget -qO-'
    when: "'/wget' in cmd.stdout"

  - name: Determine if install type curl
    set_fact:
      run_command: 'curl -o-'
    when: "'/curl' in cmd.stdout"

  - name: Create nvm_dir if it does not exist
    file:
      mode: 0775
      path: "{{ nvm_settings.nvm_dir }}"
      state: directory
    become: true
    when: nvm_settings.nvm_dir | length != 0

  # There are some potential security concerns with piping the install.sh script to whatever shell alias is defined: Risk is Low but not absolute
  # https://blog.dijit.sh//don-t-pipe-curl-to-bash
  # https://news.ycombinator.com/item?id=12766049
  # https://sandstorm.io/news/2015-09-24-is-curl-bash-insecure-pgp-verified-install
  - set_fact:
      temp_install_nvm_cmd: "{{ run_command }} https://raw.githubusercontent.com/creationix/nvm/v{{ nvm_settings.nvm_version }}/install.sh | NVM_SOURCE={{ nvm_settings.nvm_source }} NVM_DIR={{ nvm_settings.nvm_dir }} PROFILE={{ nvm_settings.nvm_profile }} {{ user_shell.alias }}"
  - debug:
      var: temp_install_nvm_cmd
  - name: Install NVM
    shell: "{{ temp_install_nvm_cmd }}"
    #args:
    #  warn: false
    register: nvm_result
    changed_when: "'already installed' not in nvm_result.stdout"
    failed_when:
      - "'permission denied' in nvm_result.stderr"

  - name: Update profile permissions to lock it down after writing
    file:
      mode: 0644
      path: "{{ nvm_settings.nvm_profile }}"
    become: true
    when: not profile_file.stat.exists

  when: nvm_settings.nvm_install in ['curl', 'wget']
  become: "{{ nvm_settings.user is defined }}"
  become_user: "{{ nvm_settings.user | d(omit) }}"


# git
- name: install via git
  block:
    - name: Check if git is installed
      command: "which {{ nvm_settings.nvm_install }}"
      register: cmd

    - name: Remove NVM nvm_profile
      blockinfile:
        block: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
        marker_begin: "Installed via {{ role_repo }} START"
        marker_end: "{{ role_repo }} END"
        path: "{{ nvm_settings.nvm_profile }}"
        state: absent

    - name: Install via git
      git:
        dest: "{{ nvm_settings.nvm_dir }}"
        repo: 'https://github.com/creationix/nvm.git .nvm'
        version: "{{ nvm_settings.nvm_version }}"
      when: "'/git' in cmd.stdout"

    - name: Add NVM to nvm_profile
      blockinfile:
        block: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
        create: yes
        marker_begin: "Installed nvm via {{ role_repo }} START"
        marker_end: "{{ role_repo }} END"
        mode: 0644
        path: "{{ nvm_settings.nvm_profile }}"
        state: present

  when: "nvm_settings.nvm_install == 'git'"
  become: "{{ nvm_settings.user is defined }}"
  become_user: "{{ nvm_settings.user | d(omit) }}"

- name: Check NVM Version # noqa 305
  shell: "{{ user_shell.command + ' \"nvm --version\"' }}"
  register: nvm_version_response
  changed_when: "nvm_version_response.rc != 0"
  become: "{{ nvm_settings.user is defined }}"
  become_user: "{{ nvm_settings.user | d(omit) }}"

# Autocomplete
- name: Add NVM autocomplete to nvm_profile
  blockinfile:
    block: |
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    insertafter: "# This loads nvm"
    marker_begin: "Installed nvm autocomplete via {{ role_repo }} START"
    marker_end: "{{ role_repo }} END"
    mode: 0644
    path: "{{ nvm_settings.nvm_profile }}"
    state: present
  when: nvm_settings.autocomplete
  become: "{{ nvm_settings.user is defined }}"
  become_user: "{{ nvm_settings.user | d(omit) }}"


# This scenario handles the first run/install of NVM because this will automatically
# alias the specified version as default - This should handle most use cases
- name: Install Node # noqa 305
  shell: "{{ user_shell.command + ' \"nvm install ' +  nvm_settings.nodejs_version + '\"' }}"
  register: node_version_response
  changed_when: "'already installed' not in node_version_response.stderr"
  become: "{{ nvm_settings.user is defined }}"
  become_user: "{{ nvm_settings.user | d(omit) }}"

# In the event there are multiple versions of Node being installed/used/upgraded
# on the same machine we'll need to alias the default version accordingly
- name: Set default version of Node if multiple versions exist # noqa 305
  shell: "{{ user_shell.command + ' \"nvm alias default ' +  nvm_settings.nodejs_version + '\"' }}"
  when:  nvm_settings.default
  become: "{{ nvm_settings.user is defined }}"
  become_user: "{{ nvm_settings.user | d(omit) }}"

- name: Run whatever nvm_commands are there # noqa 305
  shell: "{{ user_shell.command + ' \"' +  item + '\"' }}"
  with_items:
    "{{ nvm_settings.nvm_commands }}"
  when: nvm_settings.nvm_commands | length > 0
  become: "{{ nvm_settings.user is defined }}"
  become_user: "{{ nvm_settings.user | d(omit) }}"

# Uninstall NVM
- name: uninstall nvm
  block:

  - name: Uninstall NVM
    file:
      path: "{{ lookup('env','NVM_DIR') }}"
      state: absent

  - name: Remove NVM nvm_profile info
    lineinfile:
      regexp: '^export.+nvm\"|\[.+nvm'
      path: "{{ nvm_settings.nvm_profile }}"
      state: absent

  - name: Remove NVM autocomplete from nvm_profile
    blockinfile:
      block: |
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
      marker_begin: "Installed via {{ role_repo }} START"
      marker_end: "{{ role_repo }} END"
      path: "{{ nvm_settings.nvm_profile }}"
      state: absent

  when: nvm_settings.uninstall | bool
  become: "{{ nvm_settings.user is defined }}"
  become_user: "{{ nvm_settings.user | d(omit) }}"
