---
- name: "Nuvarande repo"
  debug:
    msg: "{{ repo.url }}"
#- pause:

- block:
  - name: "Empty upper-dir directory for repo. (Find)"
    become: yes
    find:
      path: "{{ application.path }}/devmode/overlayfs/{{ repo.name }}-upper"
      file_type: any
      hidden: yes
    register: to_delete

  - name: "Empty upper-dir directory for repo. (Delete)"
    become: yes
    file:
      state: absent
      path: "{{ item.path }}"
    loop: "{{ to_delete.files }}"
  when: applications_devmode and applications_devmode_use_overlayfs


# deploy_facts[repo.name].path is static
# deploy_facts[repo.name].source is same as path, but might be changed by a deploy plugin.
- name: deploy_facts
  set_fact:
    deploy_facts: >-
      {{-
        deploy_facts | combine({
            repo.name: {
              'version': repo.branch|default('master'),
              'source': application.path+'/repos/'+repo.name,
              'path': application.path+'/repos/'+repo.name,
              'repo': repo
            }
         }) -}}


- name: Clona repot
  include_role:
    name: git
    tasks_from: clone_repo
  vars:
    clone_repo:
      dest: "{{ deploy_facts[repo.name].source }}"
      user: "{{ application.process_user }}"
  when: not applications_devmode

- name: Hämta alla taggar och uppdateringar ifrån repot
  become: yes
  become_user: "{{ application.process_user }}"
  shell: "git fetch --all --tags"
  args:
    chdir: "{{ application.path }}/repos/{{ repo.name }}"
  register: tags_stdout
  when: not applications_devmode

- name: Checka ut nuvarande branch
  become: yes
  become_user: "{{ application.process_user }}"
  shell: "git checkout {{ deploy_facts[repo.name].version }}"
  args:
    chdir: "{{ application.path }}/repos/{{ repo.name }}"
  when: not applications_devmode

# changed_when: not Already on 'master'
- name: "Lista commit-meddelanden sen senaste pull"
  become: yes
  become_user: "{{ application.process_user }}"
  shell: >-
    git log --pretty=format:"%s (%aN)" ..origin/HEAD
  args:
    chdir: "{{ application.path }}/repos/{{ repo.name }}"
  changed_when: git_list_of_commits.rc == 0
  failed_when: >
    not
    (
      git_list_of_commits.rc == 0
      or
      (
        git_list_of_commits.rc == 1
        and
        git_list_of_commits.stderr == ""
        and
        git_list_of_commits.stdout == ""
      )
    )
  register: git_list_of_commits
  when: not applications_devmode

- name: Lista med commit-meddleande i deploy_facts
  set_fact:
    deploy_facts: >-
      {{- deploy_facts | combine({
        repo.name: {
            'list_of_commits': git_list_of_commits.stdout
            ,'list_of_commits_debug': git_list_of_commits
          }
        }
        , recursive=True) -}}
  when: not applications_devmode

- name: Merge ändringar
  become: yes
  become_user: "{{ application.process_user }}"
  shell: "git pull"
  args:
    chdir: "{{ application.path }}/repos/{{ repo.name }}"
  when: not applications_devmode
# changed_when: not Already up to date
    
#setype: httpd_sys_rw_content_t om nginx ska skriva...

#- name: Hämta alla taggar ifrån repot
#  become: yes
#  become_user: "{{ application.process_user }}"
#  shell: "git fetch --all --tags"
#  args:
#    chdir: "{{ application.path }}/repos/{{ repo.name }}"

# 2020-01-19 LL Borde vi ha plugins per repo, eller är det bättre med applikationsglobala?
#- name: Deploy
#  include_tasks: "deploy_plugins/deploy_{{ deploy.plugin }}.yml"
#  loop: "{{ repo.deploy | default([]) }}"
#  when: >
#    deploy.filter is not defined
#    or (deploy.filter.include_environment is defined and application.environment in deploy.filter.include_environment)
#    or (deploy.filter.exclude_environment is defined and application.environment not in deploy.filter.exclude_environment)
#  loop_control:
#    loop_var: deploy

