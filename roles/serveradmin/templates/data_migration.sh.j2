#!/bin/bash
{% set data_migration = item.meta %}
{% set show_progress = data_migration.show_progress | d(true) %}
{#

data_migration:
  - name: 
    confirm:
    ssh_host: 
    agent_forwarding: true/false
    show_on_splash: true
    databases:
    show_progress: true
    jobs:
      - name: name_of_job # Används i filnamn
        type: databases

        include_databases: '%' #(default)
        # or
        include_databases:
          - name1
          - name2

        exclude_databases:
        include_tables: 
          - log
          - sessions
        rename_databases:
          name1old: name1new
          name2old: name2new
        src:
          host:
          user:
          password: undefined(default)|true(ask for it)|string
          default_character_set
        dest: dumpfile # (default)
        # or
        dest:
          ?host:
          default_character_set:
          drop_database: false
          drop_tables:
          - [table-name 1]
          - [table-name 2]
          - [...]
        default_character_set: utf8mb4
        default_collation:
        exclude_tables:
          - [table-name 1]
          - [table-name 2]
          - [...]
        suffix_on_emailadresses: 'string'
        [replaces:]
         - description: "Byt ut utf8 till utf8mb4"
           pattern: utf8
           replace_with: utf8mb4
         - [...]
        no_data: true
        include_events: false
        include_triggers: false
        include_routines: false
        run_sql_after: |
          # SQL:
          # UPDATE ....
        skip_dump_date \
        single_transaction
        no_create_db \
        skip_lock_tables
        force
        
    --skip-dump-date \
    --single-transaction \
        --no-create-db \
        --skip-lock-tables \
-- force
      - type: fileset
        filesets:
          - description: ""
            dest_create: d(false)
            dest_dir:
            dest: @deprecated använd dest_dir
            src_sudo: d(false)
            excludes:
              - file1
              - file2
              - ...
            src_file
            src_dir
            src: @deprecated använd dest_dir
#}



#
# Managed by Ansible!
#
set -e
#https://stackoverflow.com/a/1221870/1003172
set -o pipefail

source {{ serveradmin.path }}/include_common.sh

{% if data_migration.confirm |  d('',True) != ''  %}
  # Från: https://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
  read -p "{{ data_migration.confirm }} [y/N]" -n 1 -r
  echo    # (optional) move to a new line
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
  fi
{% endif %}


### Pipe command ###
PIPE_COMMAND="cat"
PIPE_COMMAND_DUMP_FILE="cat"
{% if show_progress %}
if command -v pv >/dev/null 2>&1; then
  PIPE_COMMAND="pv"
else
  echo "Note: Install 'pv' to show progressbar.".
fi
{% endif %}

{% set agent_forwarding = data_migration.agent_forwarding | d(false) %}

{% if data_migration.filesets is defined %}
################## Kopiera filer #########################
  {% if agent_forwarding %}
    # https://unix.stackexchange.com/questions/131596/ssh-agent-forwarding-works-but-what-about-sudo-u-username-no-shell-permission
    # https://linux.die.net/man/1/setfacl
    setfacl -R -m u:{{ data_migration.file_owner }}:rwx "${SSH_AUTH_SOCK%/*}" && echo -e "${Yellow}INFO: Agentforwarding tillgänglig för användare {{ data_migration.file_owner }}.${NC}" || echo -e "${Red}VARNING: Agentforwardning måste vara påslaget för SSH till annan server.${NC}".
  {% endif %}
{%   set ssh_host = data_migration.ssh_host %}

  {% for fileset in data_migration.filesets %}
    echo "{{ fileset.description }}"
    {% if fileset.dest_create | d(false) %}
    sudo -u {{ data_migration.file_owner }} mkdir -p "{{ fileset.dest_dir |d(fileset.dest|d()) }}"
    {% endif %}
    #rsync:
  #-a, --archive               archive mode; equals -rlptgoD (no -H,-A,-X)
  #  -r, --recursive             recurse into directories
  #  -l, --links                 copy symlinks as symlinks
  #  -p, --perms                 preserve permissions
  #  -t, --times                 preserve modification times
  #  -g, --group                 preserve group
  #  -o, --owner                 preserve owner (super-user only)
  #  -D                          same as --devices --specials
  #    --devices               preserve device files (super-user only)
  #    --specials              preserve special files

  #  -H, --hard-links     This tells rsync to look for hard-linked files in the transfer and link together the corresponding files on the receiving side. Without this option, hard-linked files in the transfer are treated as though they were separate files.
  #  -A, --acls           This option causes rsync to update the destination ACLs to be the same as the source ACLs. The option also implies --perms.
  #  -X, --xattrs         This option causes rsync to update the remote extended attributes to be the same as the local ones.

  #-v, --verbose
  #-z, --compress              compress file data during the transfer
    sudo -u {{ data_migration.file_owner }} -i \
      {% if agent_forwarding %}SSH_AUTH_SOCK="$SSH_AUTH_SOCK"{% endif %} \
      rsync \
        {% if fileset.src_sudo | d(false) %}--rsync-path="sudo rsync"{% endif %} \
        --recursive \
        --links \
        --prune-empty-dirs \
        {% for exclude in fileset.excludes | d([]) %}--exclude '{{ exclude }}' {% endfor %} \
        "{{ ssh_host }}:{{ fileset.src_file | d(fileset.src_dir | d(fileset.src | d()) ~'/') }}" "{{ fileset.dest_dir |d(fileset.dest|d()) }}{% if fileset.src_file is not defined %}/{% endif %}"
  {% endfor %}

  {% if agent_forwarding %}
    setfacl -R -b "${SSH_AUTH_SOCK%/*}" && echo -e "${Yellow}Agentforwarding borttagen för användare {{ data_migration.file_owner }}!${NC}"
  {% endif %}
{% endif %}


{% for job in data_migration.jobs | default([]) %}
###### {{ job.name | d(loop.index) }}({{ job.type }}) ######
echo "{{ job.name | d(loop.index) }} ({{ job.type }})"
{%   if job.type in ['database', 'databases', 'db'] %}
################## job.type databases ########################
{%     set default_character_set_src = job.src.default_character_set | d(job.default_character_set | d(false)) %}
{%     set default_character_set_dest = job.dest.default_character_set | d(job.default_character_set | d(false)) %}

{%     set ssh_host = job.src.ssh_host | d(data_migration.ssh_host | d(None)) %}
{%     set ssh_pre_command = '' %}
{%     set ssh_command = '' %}

{%     set mode = job.src.mode | d('remote' if ssh_host else 'local') %}

{%     if mode == 'local' %}
{%       set host = job.src.host | d(ssh_host) %}
{%     elif mode == 'local_with_ssh_tunnel' %}
{#       https://gist.github.com/scy/6781836 och http://www.g-loaded.eu/2006/11/24/auto-closing-ssh-tunnels/ #}
{%       set ssh_pre_command = 'rm -f ./temp-tunnel.sock && ssh -f -F /dev/null -o ExitOnForwardFailure=yes -L ./temp-tunnel.sock:/var/lib/mysql/mysql.sock '~ssh_host~' sleep 3' %}
{%       set protocol = 'socket' %}
{%       set socket = './temp-tunnel.sock' %}
{%     elif mode == 'remote' %}
{%       set ssh_command = 'ssh '~('-A ' if agent_forwarding else '')~'-C '~ssh_host~' ' %}
{%     endif %}

{%     if job.include_databases is not defined or job.include_databases is string %}
{#       https://stackoverflow.com/questions/11426529/reading-output-of-a-command-into-an-array-in-bash #}
         {{ ssh_pre_command }}
         mapfile -t databases < <(
             {{ ssh_command }}mysql \
                     {{ default_character_set_src | ternary('--default-character-set='~default_character_set_src,'') }} \
                     {{ '--host='~host if host|d(false) else '' }} \
                     {{ '--socket='~socket if socket|d(false) else '' }} \
                     {{ '--protocol='~protocol if protocol|d(false) else '' }} \
                     {{ '--user='~job.src.user if job.src.user is defined else '' }} \
                     {% if job.src.password is defined %}--password{{ '=' ~ (job.src.password | quote) if job.src.password is string else '' }}{% endif %} \
                     -BNe "SHOW DATABASES WHERE \`Database\` LIKE '{{ job.include_databases | d('%') }}'
                         {%- if job.exclude_databases is string %} AND \`Database\` NOT LIKE '{{ job.exclude_databases }}'{% endif -%}
                         {#- #} AND \`Database\` NOT IN (
                             {{- (job.exclude_databases | default([]) | map('regex_replace', '^(.*)$', '\'\\1\',') | join('')) if job.exclude_databases is iterable else '' -}}
                             'mysql','information_schema','performance_schema');"

{# %           if data_migration.ssh_host is defined %}EOF{% endif % #}

         )
{%     else %}
databases=({{ job.include_databases | map('regex_replace', '^(.*)$', '\"\\1\"') | join(' ') }})
{%     endif %}

       echo "### Dump database from {{ job.src.ssh_host | d(data_migration.ssh_host | d('localhost')) }} ####"
{%     if default_character_set_src %}
         echo "  Default character set: {{ default_character_set_src }}"
{%     endif %}
       echo "  {{ job.no_data          | d(false) | ternary('Exclude', 'Include') }} data"
       echo "  {{ job.include_events   | d(true)  | ternary('Include', 'Exclude') }} events"
       echo "  {{ job.include_routines | d(true)  | ternary('Include', 'Exclude') }} routines"
       echo "  {{ job.include_triggers | d(true)  | ternary('Include', 'Exclude') }} triggers"
{%     if job.exclude_tables is defined %}
         echo "  Exclude tables:"
{%       for table in job.exclude_tables | d([]) %}
           echo "  - {{ table }}"
{%       endfor %}
{%     endif %}
{%     if job.include_tables is defined %}
         echo "  Include tables:"
{%       for table in job.include_tables | d([]) %}
           echo "   - {{ table }}"
{%       endfor %}
{%     endif %}

       for db in ${databases[@]}; do
         echo "Backing up: $db..."

         DUMPFILE="dump_{{ job.name | d(loop.index) }}_$db.sql"

{%       if show_progress %}
           # Does old file exists? (for progressbar)
           if [ "$PIPE_COMMAND" == "pv" ]; then
             if [ -f "$DUMPFILE" ]; then
               PIPE_COMMAND_DUMP_FILE="pv --wait -s $(stat --printf="%s" $DUMPFILE)"
             else
               PIPE_COMMAND_DUMP_FILE="pv --wait"
             fi
           fi
{%       endif %}

         echo "Dump $db to $DUMPFILE..."
         {# ssh -t använt tidigare, men kan inte svara på password då. (Ctrl + d för att avbryta) #}
         {# Även testat "ssh {host] bash << EOF" men då fungerar inte något interaktivt: https://unix.stackexchange.com/questions/100652/bash-interactive-remote-prompt #}
         {{ ssh_pre_command }}
         (
           {{ ssh_command }}mysqldump \
             {{ default_character_set_src | ternary('--default-character-set='~default_character_set_src,'') }} \
             {{ '--host='~host if host|d(false) else '' }} \
             {{ '--socket='~socket if socket|d(false) else '' }} \
             {{ '--protocol='~protocol if protocol|d(false) else '' }} \
             {{ '--user='~job.src.user if job.src.user is defined else '' }} \
             {% if job.src.password is defined %}--password{{ '='~job.src.password if job.src.password is string else '' }}{% endif %} \
             {{ job.no_data            | d(false) | ternary('--no-data','') }} \
             {{ job.include_events     | d(true)  | ternary('--events','') }} \
             {{ job.include_routines   | d(true)  | ternary('--routines','') }} \
             {{ job.include_triggers   | d(true)  | ternary('--triggers','') }} \
             {{ job.force              | d(false) | ternary('--force','') }} \
             {{ job.skip_lock_tables   | d(false) | ternary('--skip-lock-tables','') }} \
             {{ job.skip_dump_date     | d(false) | ternary('--skip-dump-date','') }} \
             {{ job.single_transaction | d(false) | ternary('--single-transaction','') }} \
             --no-create-db \
             {% for table in job.exclude_tables | d([]) %}--ignore-table=$db.{{ table }} {% endfor %} \
             "$db" \
             {% for table in job.include_tables | d([]) %}{{ table }} {% endfor %}

{# %         if data_migration.ssh_host is defined %}EOF{% endif % #}

         ) | $PIPE_COMMAND_DUMP_FILE > "$DUMPFILE"
### Process database dump-file ###
         echo
         DESTDB="$db"
{%       for from,to in (job.rename_databases | d({})).items() %}
           if [ "$db" == "{{ from }}" ]; then
             echo "Search for '{{ from }} and replace with '{{ to }}' in dumpfile..."
             # mysqldump kan lämna några spår av databasnamnet, exempelvis i triggers, så byt ut dessa:
             sed -ri "s/\`{{ from }}\`/\`{{ to }}\`/g" "$DUMPFILE"
             DESTDB="{{ to }}"
           fi
{%       endfor %}

{%       if job.suffix_on_emailadresses | d('', true) != '' %}
           echo "Add '{{ job.suffix_on_emailadresses }}' on all email-addresses to make them useless..."
           # -i == inplace (in och ut i samma fil)
           sed -i -r "s/'([^@'\ ]+@[^@'\ ]+)'/'\1{{ job.suffix_on_emailadresses }}'/g" "$DUMPFILE"
{%       endif %}

{%       if job.remove_definer | d(true) != '' %}
           echo "Remove  definer=xxx@yyy i Triggers and SP."
           # -i == inplace (in och ut i samma fil)
           sed -i -e 's/DEFINER[ ]*=[ ]*[^*]*\*/\*/' "$DUMPFILE"
           sed -i -e 's/DEFINER[ ]*=[ ]*[^*]*PROCEDURE/PROCEDURE/' "$DUMPFILE"
           sed -i -e 's/DEFINER[ ]*=[ ]*[^*]*FUNCTION/FUNCTION/' "$DUMPFILE"
{%       endif %}


{%       for replace in job.replaces | default([]) %}
           echo "{{ replace.description }}"
           sed -i -r "s/{{ replace.pattern  }}/{{ replace.replace_with }}/g" "$DUMPFILE"
{%       endfor %}

{%       if job.dest | d('dumpfile') != 'dumpfile' %}
### Populate dest Database ###
{%         if job.dest.drop_database | d(true) %}
             echo "Drop database $DESTDB if exists..."
             mysql -NB -e "DROP DATABASE IF EXISTS \`$DESTDB\`"

             echo "Create database..."
{%           if job.default_character_set is defined %}
               echo "  DEFAULT CHARACTER SET {{ job.default_character_set }}"
{%             if job.default_collation is defined %}
                 echo "  COLLATE {{ job.default_collation }}"
{%             endif %}
{%           endif %}
             mysql -NB -e "CREATE DATABASE \`$DESTDB\`{% if job.default_character_set is defined %} DEFAULT CHARACTER SET {{ job.default_character_set }}{% if job.default_collation is defined %} COLLATE {{ job.default_collation }}{% endif %}{% endif %};"
{%         endif %}

{%         for table in job.dest.drop_tables | d([]) %}
             echo "Drop table {{ table }} if exists..."
             mysql -NB -e "DROP TABLE IF EXISTS \`$DESTDB\`.\`{{ table }}\`"
{%         endfor %}

           echo "Populate local database..."
{%         if default_character_set_dest %}
             echo "  Default character set: {{ default_character_set_dest }}"
{%         endif %}
           $PIPE_COMMAND "$DUMPFILE" \
               | mysql \
               {{ default_character_set_dest | ternary('--default-character-set='~default_character_set_dest,'') }} \
               "$DESTDB"

{%         if job.run_sql_after is defined %}
             echo "Run SQL..."
             ($PIPE_COMMAND << DataMigrationEndOfSQL
{{ job.run_sql_after }}
DataMigrationEndOfSQL
             ) | mysql \
                 {{ default_character_set_dest | ternary('--default-character-set='~default_character_set_src,'') }} \
                 "$DESTDB"
{%         endif %}### End: Populate Database ###
{%       endif %}
       done ### End: Loop databases
################## End: job.type databases ###################
{%   elif job.type in ['fileset'] %}
################## job.type fileset ##########################
{%     if agent_forwarding %}
    # https://unix.stackexchange.com/questions/131596/ssh-agent-forwarding-works-but-what-about-sudo-u-username-no-shell-permission
    # https://linux.die.net/man/1/setfacl
    setfacl -R -m u:{{ data_migration.file_owner }}:rwx "${SSH_AUTH_SOCK%/*}" && echo -e "${Yellow}INFO: Agentforwarding tillgänglig för användare {{ data_migration.file_owner }}.${NC}" || echo -e "${Red}VARNING: Agentforwardning måste vara påslaget för SSH till annan server.${NC}".
{%     endif %}
{%     set ssh_host = job.ssh_host|d(data_migration.ssh_host) %}

{%     for fileset in job.filesets %}
    echo "{{ fileset.description }}"
{%       if fileset.dest_create | d(false) %}
    sudo -u {{ data_migration.file_owner }} mkdir -p "{{ fileset.dest_dir |d(fileset.dest|d()) }}"
{%       endif %}
    #rsync:
  #-a, --archive               archive mode; equals -rlptgoD (no -H,-A,-X)
  #  -r, --recursive             recurse into directories
  #  -l, --links                 copy symlinks as symlinks
  #  -p, --perms                 preserve permissions
  #  -t, --times                 preserve modification times
  #  -g, --group                 preserve group
  #  -o, --owner                 preserve owner (super-user only)
  #  -D                          same as --devices --specials
  #    --devices               preserve device files (super-user only)
  #    --specials              preserve special files

  #  -H, --hard-links     This tells rsync to look for hard-linked files in the transfer and link together the corresponding files on the receiving side. Without this option, hard-linked files in the transfer are treated as though they were separate files.
  #  -A, --acls           This option causes rsync to update the destination ACLs to be the same as the source ACLs. The option also implies --perms.
  #  -X, --xattrs         This option causes rsync to update the remote extended attributes to be the same as the local ones.

  #-v, --verbose
  #-z, --compress              compress file data during the transfer
    sudo -u {{ data_migration.file_owner }} -i \
      {% if agent_forwarding %}SSH_AUTH_SOCK="$SSH_AUTH_SOCK"{% endif %} \
      rsync \
        {% if fileset.src_sudo | d(false) %}--rsync-path="sudo rsync"{% endif %} \
        --recursive \
        --links \
        --prune-empty-dirs \
        {% for exclude in fileset.excludes | d([]) %}--exclude '{{ exclude }}' {% endfor %} \
        "{{ ssh_host }}:{{ fileset.src_file | d(fileset.src_dir | d(fileset.src | d()) ~'/') }}" "{{ fileset.dest_dir |d(fileset.dest|d()) }}{% if fileset.src_file is not defined %}/{% endif %}"
{%     endfor %}

{%     if agent_forwarding %}
    setfacl -R -b "${SSH_AUTH_SOCK%/*}" && echo -e "${Yellow}Agentforwarding borttagen för användare {{ data_migration.file_owner }}!${NC}"
{%     endif %}
################## End: job.type fileset ##############
{%   elif job.type in ['cmd','command'] %}
################## job.type command ####################
   {% if job.chdir is defined %}
     cd job.chdir
   {% endif %}
   sudo -u {{ data_migration.file_owner }} -i {{ job.cmd }}
################## End: job.type command ###############
{%   else %}
       {{ unknown_type | mandatory('Unknown job-type ('~job.type|d('undefined')~')') }}
{%   endif %}### End: job.type
{% endfor %}### End: job-loop ###
